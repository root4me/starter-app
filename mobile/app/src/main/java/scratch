

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.AsyncTask;

import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Switch;

import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;


public class MainActivity extends AppCompatActivity {

    private static final String TAG = "MAIN_ACTIVITY";

    private View spinner = null;
    private GarageDoorStatus mGd = null;


    public static final int GARAGEDOOR = 0;
    public static final int GARAGETEMPERATURE = 1;

    private RecyclerView mRecyclerView;
    private RecyclerViewAdapter mAdapter;
    private RecyclerView.LayoutManager mLayoutManager;
    private List<Object> mDataset = new ArrayList<Object>();
    private int mDatasetTypes[] = {GARAGEDOOR, GARAGETEMPERATURE};


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        Log.d(TAG, "Attempt to get token from shared preferences");

        SharedPreferences pref = getSharedPreferences("me.root4.homemonitor", MODE_PRIVATE);
        final String token = pref.getString("token", null);
        Log.d(TAG, "token : " + token);

        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Snackbar.make(view, "Refreshing statuses ...", Snackbar.LENGTH_LONG)
                        .show();
                Log.d(TAG, SettingsActivity.Url(getApplicationContext()));
                mGd = new GarageDoorStatus(token, SettingsActivity.Url(getApplicationContext()));
                mGd.execute((Void) null);
            }
        });

        spinner = findViewById(R.id.progressBar2);

        mRecyclerView = (RecyclerView) findViewById(R.id.homeMonitor_recycler_view);
        mLayoutManager = new LinearLayoutManager(MainActivity.this);
        mRecyclerView.setLayoutManager(mLayoutManager);
        mAdapter = new RecyclerViewAdapter(mDataset, mDatasetTypes);
        mRecyclerView.setAdapter(mAdapter);

        if (token == null || token == "") {
            Intent intent = new Intent(getBaseContext(), LoginActivity.class);
            startActivity(intent);
        } else {
            Log.d(TAG, SettingsActivity.Url(getApplicationContext()));

            mGd = new GarageDoorStatus(token, SettingsActivity.Url(getApplicationContext()));
            mGd.execute((Void) null);
        }

    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            Log.d(TAG, "Settings clicked");

            Intent intent = new Intent(getBaseContext(), SettingsActivity.class);
            startActivity(intent);

            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    public class GarageDoorStatus extends AsyncTask<Void, Void, Boolean> {

        String mToken = "";
        String mUrl = "";

        GarageDoorStatus(String token, String url) {
            mToken = token;
            mUrl = url;
        }

        @Override
        protected Boolean doInBackground(Void... params) {
            Log.d(TAG, "Inside GarageDoorStatus.doInBackground ..");
            try {
                JSONObject token = new JSONObject();
                token.put("token", mToken);

                utils u = new utils();

                Log.d(TAG, "Before http post");

                JSONObject res = u.package me.root4.homemonitor;

                                   import android.animation.Animator;
                                   import android.animation.AnimatorListenerAdapter;
                                   import android.annotation.TargetApi;
                                   import android.content.Intent;
                                   import android.content.SharedPreferences;
                                   import android.content.pm.PackageManager;
                                   import android.support.annotation.NonNull;
                                   import android.support.design.widget.Snackbar;
                                   import android.support.v7.app.AppCompatActivity;
                                   import android.app.LoaderManager.LoaderCallbacks;

                                   import android.content.CursorLoader;
                                   import android.content.Loader;
                                   import android.database.Cursor;
                                   import android.net.Uri;
                                   import android.os.AsyncTask;

                                   import android.os.Build;
                                   import android.os.Bundle;
                                   import android.provider.ContactsContract;
                                   import android.support.v7.widget.Toolbar;
                                   import android.text.TextUtils;
                                   import android.util.Log;
                                   import android.view.KeyEvent;
                                   import android.view.Menu;
                                   import android.view.MenuItem;
                                   import android.view.View;
                                   import android.view.View.OnClickListener;
                                   import android.view.inputmethod.EditorInfo;
                                   import android.widget.ArrayAdapter;
                                   import android.widget.AutoCompleteTextView;
                                   import android.widget.Button;
                                   import android.widget.EditText;
                                   import android.widget.TextView;

                                   import org.json.JSONException;
                                   import org.json.JSONObject;

                                   import java.io.BufferedInputStream;
                                   import java.io.BufferedReader;
                                   import java.io.IOException;
                                   import java.io.InputStream;
                                   import java.io.InputStreamReader;
                                   import java.io.OutputStreamWriter;
                                   import java.net.HttpURLConnection;
                                   import java.net.MalformedURLException;
                                   import java.net.URL;
                                   import java.util.ArrayList;
                                   import java.util.List;

                                   import static android.Manifest.permission.READ_CONTACTS;

                                   /**
                                    * A login screen that offers login via username/password.
                                    */
                                   public class LoginActivity extends AppCompatActivity {

                                       private static final String TAG = "LOGIN_ACTIVITY";

                                       /**
                                        * Id to identity READ_CONTACTS permission request.
                                        */
                                       private static final int REQUEST_READ_CONTACTS = 0;

                                       /**
                                        * A dummy authentication store containing known user names and passwords.
                                        * TODO: remove after connecting to a real authentication system.
                                        */
                                       private static final String[] DUMMY_CREDENTIALS = new String[]{
                                               "foo@example.com:hello", "bar@example.com:world"
                                       };
                                       /**
                                        * Keep track of the login task to ensure we can cancel it if requested.
                                        */
                                       private UserLoginTask mAuthTask = null;

                                       // UI references.
                                       private AutoCompleteTextView musernameView;
                                       private EditText mPasswordView;
                                       private View mProgressView;
                                       private View mLoginFormView;

                                       @Override
                                       protected void onCreate(Bundle savedInstanceState) {
                                           super.onCreate(savedInstanceState);
                                           setContentView(R.layout.activity_login);

                                           Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
                                           setSupportActionBar(toolbar);

                                           // Set up the login form.
                                           musernameView = (AutoCompleteTextView) findViewById(R.id.username);

                                           mPasswordView = (EditText) findViewById(R.id.password);
                                           mPasswordView.setOnEditorActionListener(new TextView.OnEditorActionListener() {
                                               @Override
                                               public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) {
                                                   if (id == R.id.login || id == EditorInfo.IME_NULL) {
                                                       attemptLogin();
                                                       return true;
                                                   }
                                                   return false;
                                               }
                                           });

                                           Button musernameSignInButton = (Button) findViewById(R.id.username_sign_in_button);
                                           musernameSignInButton.setOnClickListener(new OnClickListener() {
                                               @Override
                                               public void onClick(View view) {
                                                   attemptLogin();
                                               }
                                           });

                                           mLoginFormView = findViewById(R.id.login_form);
                                           mProgressView = findViewById(R.id.login_progress);

                                           SharedPreferences prefs = getSharedPreferences("me.root4.homemonitor", MODE_PRIVATE);
                                           //String restoredText = prefs.getString("text", null);
                                           String token = prefs.getString("token", "");
                                           Log.i(TAG, "token : " + token);

                                           if (token != "")
                                           {
                                               // load up main activity
                                               //Intent intent = new Intent(this, MainActivity.class);
                                               //intent.putExtra("token",token);
                                               //this.startActivity(intent);
                                           }
                                       }

                                       @Override
                                       public boolean onCreateOptionsMenu(Menu menu) {
                                           // Inflate the menu; this adds items to the action bar if it is present.
                                           getMenuInflater().inflate(R.menu.menu_main, menu);
                                           return true;
                                       }

                                       @Override
                                       public boolean onOptionsItemSelected(MenuItem item) {
                                           // Handle action bar item clicks here. The action bar will
                                           // automatically handle clicks on the Home/Up button, so long
                                           // as you specify a parent activity in AndroidManifest.xml.
                                           int id = item.getItemId();

                                           //noinspection SimplifiableIfStatement
                                           if (id == R.id.action_settings) {
                                               Log.d(TAG,"Settings clicked");

                                               Intent intent = new Intent(getBaseContext(), SettingsActivity.class);
                                               startActivity(intent);

                                               return true;
                                           }

                                           return super.onOptionsItemSelected(item);
                                       }

                                       private boolean mayRequestContacts() {
                                           if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
                                               return true;
                                           }
                                           if (checkSelfPermission(READ_CONTACTS) == PackageManager.PERMISSION_GRANTED) {
                                               return true;
                                           }
                                           if (shouldShowRequestPermissionRationale(READ_CONTACTS)) {
                                               Snackbar.make(musernameView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE)
                                                       .setAction(android.R.string.ok, new View.OnClickListener() {
                                                           @Override
                                                           @TargetApi(Build.VERSION_CODES.M)
                                                           public void onClick(View v) {
                                                               requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);
                                                           }
                                                       });
                                           } else {
                                               requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);
                                           }
                                           return false;
                                       }



                                       /**
                                        * Attempts to sign in or register the account specified by the login form.
                                        * If there are form errors (invalid username, missing fields, etc.), the
                                        * errors are presented and no actual login attempt is made.
                                        */
                                       private void attemptLogin() {
                                           if (mAuthTask != null) {
                                               return;
                                           }

                                           // Reset errors.
                                           musernameView.setError(null);
                                           mPasswordView.setError(null);

                                           // Store values at the time of the login attempt.
                                           String username = musernameView.getText().toString();
                                           String password = mPasswordView.getText().toString();

                                           boolean cancel = false;
                                           View focusView = null;

                                           // Check for a valid password, if the user entered one.
                                           if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {
                                               mPasswordView.setError(getString(R.string.error_invalid_password));
                                               focusView = mPasswordView;
                                               cancel = true;
                                           }

                                           // Check for a valid username address.
                                           if (TextUtils.isEmpty(username)) {
                                               musernameView.setError(getString(R.string.error_field_required));
                                               focusView = musernameView;
                                               cancel = true;
                                           } else if (!isusernameValid(username)) {
                                               musernameView.setError(getString(R.string.error_invalid_username));
                                               focusView = musernameView;
                                               cancel = true;
                                           }

                                           if (cancel) {
                                               // There was an error; don't attempt login and focus the first
                                               // form field with an error.
                                               focusView.requestFocus();
                                           } else {
                                               // Show a progress spinner, and kick off a background task to
                                               // perform the user login attempt.
                                               showProgress(true);
                                               mAuthTask = new UserLoginTask(username, password, SettingsActivity.Url(getApplicationContext()));
                                               mAuthTask.execute((Void) null);
                                           }
                                       }

                                       private boolean isusernameValid(String username) {
                                           //TODO: Replace this with your own logic
                                           return username.contains("a");
                                       }

                                       private boolean isPasswordValid(String password) {
                                           //TODO: Replace this with your own logic
                                           return password.length() > 3;
                                       }

                                       /**
                                        * Shows the progress UI and hides the login form.
                                        */
                                       @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
                                       private void showProgress(final boolean show) {
                                           // On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow
                                           // for very easy animations. If available, use these APIs to fade-in
                                           // the progress spinner.
                                           if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
                                               int shortAnimTime = getResources().getInteger(android.R.integer.config_shortAnimTime);

                                               mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
                                               mLoginFormView.animate().setDuration(shortAnimTime).alpha(
                                                       show ? 0 : 1).setListener(new AnimatorListenerAdapter() {
                                                   @Override
                                                   public void onAnimationEnd(Animator animation) {
                                                       mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
                                                   }
                                               });

                                               mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
                                               mProgressView.animate().setDuration(shortAnimTime).alpha(
                                                       show ? 1 : 0).setListener(new AnimatorListenerAdapter() {
                                                   @Override
                                                   public void onAnimationEnd(Animator animation) {
                                                       mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
                                                   }
                                               });
                                           } else {
                                               // The ViewPropertyAnimator APIs are not available, so simply show
                                               // and hide the relevant UI components.
                                               mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
                                               mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
                                           }
                                       }


                                       private void addusernamesToAutoComplete(List<String> usernameAddressCollection) {
                                           //Create adapter to tell the AutoCompleteTextView what to show in its dropdown list.
                                           ArrayAdapter<String> adapter =
                                                   new ArrayAdapter<>(LoginActivity.this,
                                                           android.R.layout.simple_dropdown_item_1line, usernameAddressCollection);

                                           musernameView.setAdapter(adapter);
                                       }


                                       /**
                                        * Represents an asynchronous login/registration task used to authenticate
                                        * the user.
                                        */
                                       public class UserLoginTask extends AsyncTask<Void, Void, Boolean> {

                                           private final String mUsername;
                                           private final String mPassword;
                                           private String mLoginMessage;
                                           String mUrl = "";

                                           UserLoginTask(String username, String password, String url) {
                                               mUsername = username;
                                               mPassword = password;
                                               mUrl = url;
                                           }

                                           @Override
                                           protected Boolean doInBackground(Void... params) {

                                               Log.i(TAG, "Inside doInBackground  .. Attempting to log in");

                                               try {
                                                   JSONObject login = new JSONObject();
                                                   try {
                                                       login.put("user", mUsername);
                                                       login.put("pwd", mPassword);
                                                   } catch (JSONException e) {
                                                       e.printStackTrace();
                                                   }

                                                   utils l = new utils();

                                                   JSONObject res = l.httpRequest(mUrl + "/api/login", "POST" , login, null);
                                                   String s = res.getString("success");

                                                   if (Boolean.parseBoolean(s)) {
                                                       // store token in shared pref
                                                       SharedPreferences.Editor editor = getSharedPreferences("me.root4.homemonitor", MODE_PRIVATE).edit();
                                                       editor.putString("token", res.getString("token"));

                                                       Log.i(TAG, res.getString("token"));

                                                       editor.commit();

                                                       return true;
                                                   } else {
                                                       return false;

                                                   }

                                                   //return login(login);
                                               } catch (Exception e) {
                                                   return false;
                                               }

                                           }

                                           @Override
                                           protected void onPostExecute(final Boolean success) {
                                               mAuthTask = null;
                                               showProgress(false);

                                               Log.i(TAG, "Inside onPostExecute ");

                                               if (success) {
                                                   //finish();
                                                   Log.i(TAG, "Success");

                                                   Intent intent = new Intent(getBaseContext(), MainActivity.class);
                                                   //intent.putExtra("EXTRA_SESSION_ID", sessionId);
                                                   startActivity(intent);

                                               } else {
                                                   Log.i(TAG, "Fail");
                                               }
                                           }

                                           @Override
                                           protected void onCancelled() {
                                               mAuthTask = null;
                                               showProgress(false);
                                           }
                                       }


                                   }
(mUrl + "/api/sh/gd", "GET", null, mToken);

                Log.d(TAG, "response : " + res);

                if (Boolean.parseBoolean(res.getString("authenticated"))) {

                    Log.d(TAG, "Inside authenticated ...");

                    GarageDoorInfo gdi = new GarageDoorInfo();
                    gdi.setStatus(res.getString("status"));
                    gdi.setUpdatedDate(res.getString("updated"));

                    if (mDataset.size() == 0) {
                        mDataset.add(0, gdi);
                    } else {
                        mDataset.set(0, gdi);
                    }

                } else {
                    Intent intent = new Intent(getBaseContext(), LoginActivity.class);
                    //intent.putExtra("EXTRA_SESSION_ID", sessionId);
                    startActivity(intent);
                }
                Log.d(TAG, "GarageDoorStatus size : " + mDataset.size());
                return true;

            } catch (Exception e) {
                Log.e(TAG, e.getMessage());
                return false;
            }

        }

        @Override
        protected void onPostExecute(final Boolean success) {

            utils.showProgress(false, spinner, null);

            Log.i(TAG, "Inside onPostExecute ");

            if (success) {
                //finish();
                Log.i(TAG, "Success");
            } else {
                Log.i(TAG, "Fail");
                Intent intent = new Intent(getBaseContext(), LoginActivity.class);
                startActivity(intent);
            }

            mAdapter.notifyDataSetChanged();

            Log.d(TAG, "size : " + mDataset.size());
        }

        @Override
        protected void onCancelled() {
            utils.showProgress(false, spinner, null);
        }
    }

}

----------------
package me.root4.homemonitor;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.annotation.TargetApi;
import android.os.Build;
import android.util.Log;
import android.view.View;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * Created by root4me on 11/11/16.
 */

public class utils {

    private static final String TAG = "UTILS";

    public JSONObject httpRequest(String urlString, String method, JSONObject params, String authToken) {

        Log.d(TAG, "Inside httpPost");

        URL url = null;
        HttpURLConnection urlConnection = null;

        try {
            url = new URL(urlString);
            urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.setConnectTimeout(10000);
            urlConnection.setRequestMethod(method);
            urlConnection.setRequestProperty("Content-Type", "application/json");
            Log.d(TAG, "token : " + authToken);
            urlConnection.setRequestProperty("x-access-token", authToken);

            if (method == "POST") {
                urlConnection.setDoOutput(true);
                OutputStreamWriter out = new OutputStreamWriter(urlConnection.getOutputStream());
                out.write(String.valueOf(params));
                out.close();
            }

            InputStream in = null;
            if (urlConnection.getResponseCode() == 401) {
                in = new BufferedInputStream(urlConnection.getErrorStream());
            } else {
                in = new BufferedInputStream(urlConnection.getInputStream());
            }
            String inp = utils.readStream(in);

            Log.d(TAG, "urlConnection.getInputStream : " + inp);

            JSONObject res = new JSONObject(inp);

            // retun response JSON
            return res;

        } catch (Exception e) {
            Log.d(TAG, "Inside error");

            e.printStackTrace();

            JSONObject j = null;
            j = new JSONObject();
            try {
                j.put("success", false);
            } catch (JSONException e1) {
                e1.printStackTrace();
            }
            return j;

        } finally {
            if (urlConnection != null) {
                urlConnection.disconnect();
                Log.i(TAG, "http Disconnecting ...");
            }
        }
    }


    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
    public static void showProgress(final boolean show, final View progress, final View hideView) {
        // On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow
        // for very easy animations. If available, use these APIs to fade-in
        // the progress spinner.
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
            //int shortAnimTime = getResources().getInteger(android.R.integer.config_shortAnimTime);

            int shortAnimTime = 200;

            if (hideView != null) {
                hideView.setVisibility(show ? View.GONE : View.VISIBLE);
                hideView.animate().setDuration(shortAnimTime).alpha(
                        show ? 0 : 1).setListener(new AnimatorListenerAdapter() {
                    @Override
                    public void onAnimationEnd(Animator animation) {
                        hideView.setVisibility(show ? View.GONE : View.VISIBLE);
                    }
                });
            }

            progress.setVisibility(show ? View.VISIBLE : View.GONE);
            progress.animate().setDuration(shortAnimTime).alpha(
                    show ? 1 : 0).setListener(new AnimatorListenerAdapter() {
                @Override
                public void onAnimationEnd(Animator animation) {
                    progress.setVisibility(show ? View.VISIBLE : View.GONE);
                }
            });
        } else {
            // The ViewPropertyAnimator APIs are not available, so simply show
            // and hide the relevant UI components.
            progress.setVisibility(show ? View.VISIBLE : View.GONE);
            progress.setVisibility(show ? View.GONE : View.VISIBLE);
        }
    }

    public static String readStream(InputStream in) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(in));
        StringBuilder sb = new StringBuilder();

        String line;
        while ((line = br.readLine()) != null) {
            sb.append(line);
        }

        return sb.toString();
    }

}

-----------------------

package me.root4.homemonitor;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.annotation.TargetApi;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.support.annotation.NonNull;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.app.LoaderManager.LoaderCallbacks;

import android.content.CursorLoader;
import android.content.Loader;
import android.database.Cursor;
import android.net.Uri;
import android.os.AsyncTask;

import android.os.Build;
import android.os.Bundle;
import android.provider.ContactsContract;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.util.Log;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.EditorInfo;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import static android.Manifest.permission.READ_CONTACTS;

/**
 * A login screen that offers login via username/password.
 */
public class LoginActivity extends AppCompatActivity {

    private static final String TAG = "LOGIN_ACTIVITY";

    /**
     * Id to identity READ_CONTACTS permission request.
     */
    private static final int REQUEST_READ_CONTACTS = 0;

    /**
     * A dummy authentication store containing known user names and passwords.
     * TODO: remove after connecting to a real authentication system.
     */
    private static final String[] DUMMY_CREDENTIALS = new String[]{
            "foo@example.com:hello", "bar@example.com:world"
    };
    /**
     * Keep track of the login task to ensure we can cancel it if requested.
     */
    private UserLoginTask mAuthTask = null;

    // UI references.
    private AutoCompleteTextView musernameView;
    private EditText mPasswordView;
    private View mProgressView;
    private View mLoginFormView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        // Set up the login form.
        musernameView = (AutoCompleteTextView) findViewById(R.id.username);

        mPasswordView = (EditText) findViewById(R.id.password);
        mPasswordView.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) {
                if (id == R.id.login || id == EditorInfo.IME_NULL) {
                    attemptLogin();
                    return true;
                }
                return false;
            }
        });

        Button musernameSignInButton = (Button) findViewById(R.id.username_sign_in_button);
        musernameSignInButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                attemptLogin();
            }
        });

        mLoginFormView = findViewById(R.id.login_form);
        mProgressView = findViewById(R.id.login_progress);

        SharedPreferences prefs = getSharedPreferences("me.root4.homemonitor", MODE_PRIVATE);
        //String restoredText = prefs.getString("text", null);
        String token = prefs.getString("token", "");
        Log.i(TAG, "token : " + token);

        if (token != "")
        {
            // load up main activity
            //Intent intent = new Intent(this, MainActivity.class);
            //intent.putExtra("token",token);
            //this.startActivity(intent);
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            Log.d(TAG,"Settings clicked");

            Intent intent = new Intent(getBaseContext(), SettingsActivity.class);
            startActivity(intent);

            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    private boolean mayRequestContacts() {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
            return true;
        }
        if (checkSelfPermission(READ_CONTACTS) == PackageManager.PERMISSION_GRANTED) {
            return true;
        }
        if (shouldShowRequestPermissionRationale(READ_CONTACTS)) {
            Snackbar.make(musernameView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE)
                    .setAction(android.R.string.ok, new View.OnClickListener() {
                        @Override
                        @TargetApi(Build.VERSION_CODES.M)
                        public void onClick(View v) {
                            requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);
                        }
                    });
        } else {
            requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);
        }
        return false;
    }



    /**
     * Attempts to sign in or register the account specified by the login form.
     * If there are form errors (invalid username, missing fields, etc.), the
     * errors are presented and no actual login attempt is made.
     */
    private void attemptLogin() {
        if (mAuthTask != null) {
            return;
        }

        // Reset errors.
        musernameView.setError(null);
        mPasswordView.setError(null);

        // Store values at the time of the login attempt.
        String username = musernameView.getText().toString();
        String password = mPasswordView.getText().toString();

        boolean cancel = false;
        View focusView = null;

        // Check for a valid password, if the user entered one.
        if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {
            mPasswordView.setError(getString(R.string.error_invalid_password));
            focusView = mPasswordView;
            cancel = true;
        }

        // Check for a valid username address.
        if (TextUtils.isEmpty(username)) {
            musernameView.setError(getString(R.string.error_field_required));
            focusView = musernameView;
            cancel = true;
        } else if (!isusernameValid(username)) {
            musernameView.setError(getString(R.string.error_invalid_username));
            focusView = musernameView;
            cancel = true;
        }

        if (cancel) {
            // There was an error; don't attempt login and focus the first
            // form field with an error.
            focusView.requestFocus();
        } else {
            // Show a progress spinner, and kick off a background task to
            // perform the user login attempt.
            showProgress(true);
            mAuthTask = new UserLoginTask(username, password, SettingsActivity.Url(getApplicationContext()));
            mAuthTask.execute((Void) null);
        }
    }

    private boolean isusernameValid(String username) {
        //TODO: Replace this with your own logic
        return username.contains("a");
    }

    private boolean isPasswordValid(String password) {
        //TODO: Replace this with your own logic
        return password.length() > 3;
    }

    /**
     * Shows the progress UI and hides the login form.
     */
    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
    private void showProgress(final boolean show) {
        // On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow
        // for very easy animations. If available, use these APIs to fade-in
        // the progress spinner.
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
            int shortAnimTime = getResources().getInteger(android.R.integer.config_shortAnimTime);

            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
            mLoginFormView.animate().setDuration(shortAnimTime).alpha(
                    show ? 0 : 1).setListener(new AnimatorListenerAdapter() {
                @Override
                public void onAnimationEnd(Animator animation) {
                    mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
                }
            });

            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
            mProgressView.animate().setDuration(shortAnimTime).alpha(
                    show ? 1 : 0).setListener(new AnimatorListenerAdapter() {
                @Override
                public void onAnimationEnd(Animator animation) {
                    mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
                }
            });
        } else {
            // The ViewPropertyAnimator APIs are not available, so simply show
            // and hide the relevant UI components.
            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
        }
    }


    private void addusernamesToAutoComplete(List<String> usernameAddressCollection) {
        //Create adapter to tell the AutoCompleteTextView what to show in its dropdown list.
        ArrayAdapter<String> adapter =
                new ArrayAdapter<>(LoginActivity.this,
                        android.R.layout.simple_dropdown_item_1line, usernameAddressCollection);

        musernameView.setAdapter(adapter);
    }


    /**
     * Represents an asynchronous login/registration task used to authenticate
     * the user.
     */
    public class UserLoginTask extends AsyncTask<Void, Void, Boolean> {

        private final String mUsername;
        private final String mPassword;
        private String mLoginMessage;
        String mUrl = "";

        UserLoginTask(String username, String password, String url) {
            mUsername = username;
            mPassword = password;
            mUrl = url;
        }

        @Override
        protected Boolean doInBackground(Void... params) {

            Log.i(TAG, "Inside doInBackground  .. Attempting to log in");

            try {
                JSONObject login = new JSONObject();
                try {
                    login.put("user", mUsername);
                    login.put("pwd", mPassword);
                } catch (JSONException e) {
                    e.printStackTrace();
                }

                utils l = new utils();

                JSONObject res = l.httpRequest(mUrl + "/api/login", "POST" , login, null);
                String s = res.getString("success");

                if (Boolean.parseBoolean(s)) {
                    // store token in shared pref
                    SharedPreferences.Editor editor = getSharedPreferences("me.root4.homemonitor", MODE_PRIVATE).edit();
                    editor.putString("token", res.getString("token"));

                    Log.i(TAG, res.getString("token"));

                    editor.commit();

                    return true;
                } else {
                    return false;

                }

                //return login(login);
            } catch (Exception e) {
                return false;
            }

        }

        @Override
        protected void onPostExecute(final Boolean success) {
            mAuthTask = null;
            showProgress(false);

            Log.i(TAG, "Inside onPostExecute ");

            if (success) {
                //finish();
                Log.i(TAG, "Success");

                Intent intent = new Intent(getBaseContext(), MainActivity.class);
                //intent.putExtra("EXTRA_SESSION_ID", sessionId);
                startActivity(intent);

            } else {
                Log.i(TAG, "Fail");
            }
        }

        @Override
        protected void onCancelled() {
            mAuthTask = null;
            showProgress(false);
        }
    }


}


